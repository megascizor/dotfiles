[[plugins]]
repo = "neovim/nvim-lspconfig"
on_ft = [
  "javascript",
  "typescript",
  "javascriptreact",
  "typescriptreact",
  "go",
  "python",
  "terraform",
  "json",
  "jsonc",
  "json5",
]
if = "has('nvim')"
depends = "ddc.vim"
lua_source = """
-- Mappings
-- See ':help vim.diagnostic.*' for documentation on any of the below functions
local opts = { noremap = true, silent = true }
vim.keymap.set('n', '<Leader>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[g', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']g', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<Leader>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <C-x><C-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings
  local bufopts = { noremap = true, silent = true, buffer = bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
  vim.keymap.set('n', '<Leader>wa', vim.lsp.buf.add_workspace_folder, bufopts)
  vim.keymap.set('n', '<Leader>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
  vim.keymap.set('n', '<Leader>wl', function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, bufopts)
  vim.keymap.set('n', '<Leader>D', vim.lsp.buf.type_definition, bufopts)
  vim.keymap.set('n', '<Leader>rn', vim.lsp.buf.rename, bufopts)
  vim.keymap.set('n', '<Leader>ca', vim.lsp.buf.code_action, bufopts)
  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
  vim.keymap.set('n', 'F', function() vim.lsp.buf.format { async = true } end, bufopts)
end

local function get_python_path(workspace)
  local util = require('lspconfig/util')
  local path = util.path

  -- Use activated virtualenv.
  if vim.env.VIRTUAL_ENV then
    return path.join(vim.env.VIRTUAL_ENV, 'bin', 'python')
  end

  -- Find and use virtualenv from Poetry in workspace directory.
  local match = vim.fn.glob(path.join(workspace, 'poetry.lock'))
  if match ~= '' then
    local venv = vim.fn.trim(vim.fn.system('poetry env info -p'))
    return path.join(venv, 'bin', 'python')
  end

  -- Fallback to system Python.
  return vim.fn.exepath('python3') or vim.fn.exepath('python') or 'python'
end

local config = require('lspconfig')
local servers = {
  'gopls',
  'rust_analyzer',
  'pyright',
  'denols',
  'tsserver',
  'eslint',
  'html',
  'cssls',
  'jsonls',
  'terraformls',
}
for _, server in ipairs(servers) do
  if server == 'pyright' then
    config[server].setup{
      on_attach = on_attach,
      on_init = function(client) client.config.settings.python.pythonPath = get_python_path(client.config.root_dir) end,
    }
  elseif server == 'denols' then
    config[server].setup{
      root_dir = config.util.root_pattern('deno.jsonc'),
      on_attach = on_attach,
    }
  elseif server == 'tsserver' then
    config[server].setup{
      root_dir = config.util.root_pattern('package.json'),
      on_attach = on_attach,
    }
  elseif server == 'html' or server == 'cssls' or server == 'eslint' or server == 'jsonls' then
    -- Enable (broadcasting) snippet capability for completion
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities.textDocument.completion.completionItem.snippetSupport = true
    config[server].setup{
      capabilities = capabilities,
      on_attach = on_attach,
    }
  else
    config[server].setup{
      on_attach = on_attach,
    }
  end
end
"""
